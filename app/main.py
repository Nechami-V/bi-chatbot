"""
BI Chatbot API - Main Application Entry Point

This FastAPI application powers the BI Chatbot system. It enables users to ask
business intelligence questions in Hebrew and receive intelligent answers based
on database analysis.

Key Capabilities
----------------
1. Hebrew natural language processing
2. Automatic SQL query generation
3. Database execution and results analysis
4. Natural language response generation
5. RESTful API with auto-generated documentation

Available Endpoints
-------------------
- GET  /          : Root endpoint with system info
- POST /ask       : Main chatbot endpoint
- GET  /health    : Health check endpoint
- Swagger UI      : /docs
- ReDoc           : /redoc

Author: BI Chatbot Team
Version: 2.0.0
"""

from fastapi import FastAPI, Depends
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from pydantic import BaseModel, Field
from typing import Optional
import os
from dotenv import load_dotenv

# Load environment variables (expects .env file)
load_dotenv()

# Import database utilities and services
from app.db.database import init_db, get_db
from app.services.ai_service import AIService
from app.services.translation_service import TranslationDictionary

# Import API versioned routes
from app.api.v1.routes import router as v1_router


class QueryRequest(BaseModel):
    """Request model for chatbot questions"""

    question: str = Field(
        ...,
        min_length=1,
        max_length=1000,
        description="Business question in Hebrew",
        example="כמה לקוחות יש לי השנה?",
    )


class QueryResponse(BaseModel):
    """Response model returned by the chatbot"""

    question: str = Field(..., description="Original question")
    answer: str = Field(..., description="Answer generated by AI in Hebrew")
    sql: Optional[str] = Field(None, description="Generated SQL query")
    error: Optional[str] = Field(None, description="Error message if any")


app = FastAPI(
    title="BI Chatbot API",
    description=(
        """AI-powered Business Intelligence Chatbot API.\n\n"
        "Ask business questions in Hebrew and receive intelligent answers "
        "based on database analysis. The system uses advanced AI models to "
        "understand natural language, generate SQL, execute queries, and "
        "produce natural language responses."""
    ),
    version="2.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
)

# Enable CORS (update allow_origins for production)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


def get_openai_key() -> str:
    """Retrieve the OpenAI API key from environment variables"""

    return os.getenv("OPENAI_API_KEY", "api-key")


@app.on_event("startup")
async def startup_event() -> None:
    """Run initialization tasks when the API starts"""

    print("🚀 BI Chatbot API starting...")
    init_db()
    print("✅ Initialization complete")


# Mount versioned API routes
app.include_router(v1_router, prefix="/api/v1", tags=["API v1"])


@app.get("/", tags=["System"])
def root():
    """Provide basic information about the service"""

    return {
        "name": "BI Chatbot API",
        "version": "2.0.0",
        "description": "AI-powered Business Intelligence Chatbot",
        "status": "active",
        "openai_configured": get_openai_key() != "api-key",
        "endpoints": {
            "chat": "/ask",
            "health": "/health",
            "docs": "/docs",
            "api_v1": "/api/v1",
        },
    }


@app.post("/ask", response_model=QueryResponse, tags=["Chatbot"])
async def ask_question(request: QueryRequest, db: Session = Depends(get_db)) -> QueryResponse:
    """Process a natural language question and return a structured response"""

    question = request.question

    try:
        print(f"📝 Received question: {question}")

        # Initialize AI service (handles schema analysis + OpenAI)
        ai_service = AIService(db)

        print("🤖 Generating SQL query...")
        sql_result = ai_service.generate_sql(question)
        if not sql_result.get("success"):
            error_msg = sql_result.get("error", "Unknown error generating SQL")
            return QueryResponse(
                question=question,
                answer=f"Error generating SQL query: {error_msg}",
                error=error_msg,
            )

        sql_query = sql_result.get("sql", "")
        print(f"✅ Generated SQL: {sql_query}")

        print("📊 Executing SQL query...")
        query_results = ai_service.execute_query(sql_query)
        if not query_results.get("success"):
            error_msg = query_results.get("error", "Unknown error executing SQL")
            return QueryResponse(
                question=question,
                answer=f"Error executing query: {error_msg}",
                sql=sql_query,
                error=error_msg,
            )

        print("💬 Generating natural language response...")
        ai_answer = ai_service.generate_response(question, query_results)
        print("✅ Response generated successfully")

        return QueryResponse(question=question, answer=ai_answer, sql=sql_query, error=None)

    except Exception as exc:  # broad exception to ensure consistent response structure
        error_msg = str(exc)
        print(f"❌ Unexpected error: {error_msg}")
        return QueryResponse(
            question=question,
            answer=f"אירעה שגיאה בעיבוד השאלה: {error_msg}",
            error=error_msg,
        )


@app.get("/health", tags=["System"])
def health_check() -> dict:
    """Basic health check endpoint

    Returns information about system status and configuration.
    """

    return {
        "status": "healthy",
        "database": "connected",
        "openai_configured": get_openai_key() != "api-key",
        "version": "2.0.0",
    }


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8081)